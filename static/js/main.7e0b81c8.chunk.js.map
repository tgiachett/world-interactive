{"version":3,"sources":["Components/SuperStructure/DataPanel/SearchBar/SearchBar.jsx","Components/SuperStructure/DataPanel/DataPanelView.jsx","Components/SuperStructure/DataPanel/DataPanelContainer.jsx","Components/SuperStructure/Map/SvgContainer/Path/PathView.jsx","Components/SuperStructure/Map/SvgContainer/Path/PathContainer.jsx","Components/SuperStructure/Map/SvgContainer/SvgLoader.jsx","Components/SuperStructure/Map/SvgContainer/SvgContainer.jsx","Components/SuperStructure/Map/MapView.jsx","Components/SuperStructure/Map/MapContainer.jsx","Components/SuperStructure/SuperStructureView.jsx","Components/SuperStructure/SuperStructureContainer.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","preventDefault","setState","inputValue","target","value","handleSubmit","runner","fetch","concat","state","then","res","json","result","data","dataRes","error","err","JSON","stringify","react_default","a","createElement","onSubmit","type","size","onChange","id","name","React","Component","DataPanelView","DataPanel_SearchBar_SearchBar","DataPanelContainer","DataPanel_DataPanelView","PathView","stroke","fill","d","activecountrydata","PathContainer","element","isColor","pfill","isHighlighted","prevProps","prevState","map","alpha2Code","indexOf","dataname","Path_PathView","undefined","svgData","require","SvgLoader","xmnlns","attributes","xmlns","version","height","width","strokeLinejoin","StrokeLinejoin","viewBox","children","p","i","countryCode","Path_PathContainer","svgelementtype","nodeType","atttributes","key","SvgContainer","SvgContainer_SvgLoader","MapView","Map_SvgContainer_SvgContainer","MapContainer","Map_MapView","SuperStructureView","style","display","flexDirection","DataPanel_DataPanelContainer","Map_MapContainer","SuperStructureContainer","delivery","apiData","SuperStructure_SuperStructureView","App","className","SuperStructure_SuperStructureContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e0b81c8.chunk.js","sourcesContent":["import React from 'react';\n\n// import SuperStructureView from './SuperStructureView';\n// import MapContainer from './Map/MapContainer';\n// import SearchBar from './DataPanel/SearchBar';\n\nclass SearchBar extends React.Component {\n\n     constructor(props) {\n        super(props);\n         this.state = {\n             inputValue: \"https://restcountries.eu/rest/v2/name/Italy\",\n             dataRes: [],\n             error: ''\n         };\n     }\n\n    //methods\n// fetch(`${this.state.inputValue}?fields=name`)\n//             .then(res => res.json())\n//             .then(\n//                 (result) => {\n//                     const data = JSON.stringify(result);\n//                     this.props.runner(data);\n//                     this.setState({\n//                         dataRes: data\n//                     });\n//                     console.log(data);\n//                 },\n//                 (error) => {\n//                     const err = JSON.stringify(error);\n//                     this.setState({\n//                         err\n//                     });\n//                     console.log(this.state.err);\n//                 }\n//             );\n\n    handleChange = (e) => {\n        e.preventDefault();\n        this.setState({\n            inputValue: e.target.value\n        });\n        \n        \n        //fetch\n                        \n    }\n\n    handleSubmit = (e) => {\n        this.props.runner('');\n        e.preventDefault();\n        \n        fetch(`${this.state.inputValue}?fields=alpha2Code`)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    \n                    const data = result;\n                    this.props.runner(data);\n                    this.setState({\n                        dataRes: data\n                    });\n                    \n                },\n                (error) => {\n                    const err = JSON.stringify(error);\n                    this.setState({\n                        err\n                    });\n                    \n                }\n            );\n        \n    } \n    \n    render() {\n\nreturn (\n            <div>\n              <form onSubmit={this.handleSubmit}>\n                <label>\n                  Query: \n                  <input type=\"text\" size={60} value={this.state.inputValue} onChange={this.handleChange}/>\n                </label>\n                <input type=\"submit\" value=\"Submit\"/>\n              </form>\n              <div id=\"results\">\n                {this.state.dataRes.name}\n              </div>\n            </div>\n        );\n}\n}\n\n    \n\n\n        \n\n\n\nexport default SearchBar;\n","import React from 'react';\nimport SearchBar from './SearchBar/SearchBar';\n\nclass DataPanelView extends React.Component {\n\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {};\n    // }\n\n    //methods\n\n    render() {\n\nreturn (\n            <div>\n              <SearchBar runner={this.props.runner}/>\n            </div>\n        );\n}\n}\n\n    \n\n\n        \n\n\n\nexport default DataPanelView;\n","import React from 'react';\nimport DataPanelView from './DataPanelView';\n\n\n\n// import SuperStructureView from './SuperStructureView';\n// import MapContainer from './Map/MapContainer';\n// import DataPanelContainer from './DataPanel/DataPanelContainer';\n\nclass DataPanelContainer extends React.Component {\n\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {};\n    // }\n\n    //methods\n\n    render() {\n\nreturn (\n            <div>\n              <DataPanelView runner={this.props.runner}>\n                \n              </DataPanelView>\n            </div>\n        );\n}\n}\n\n    \n\n\n        \n\n\n\nexport default DataPanelContainer;\n","import React from 'react';\n\n\nclass PathView extends React.Component {\n\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {};\n    // }\n\n    //methods\n\n    render() {\n\nreturn (\n\n    <path\n      stroke={this.props.stroke}\n      fill={this.props.fill}\n      id={this.props.id}\n      d={this.props.d}\n      activecountrydata={this.props.activecountrydata}\n      \n       /* runner={this.props.runner ? this.props.runner : false} */\n    >\n      \n    \n      \n            </path>\n        );\n}\n}\n\nexport default PathView;\n","import React from 'react';\nimport PathView from './PathView';\n\n\nclass PathContainer extends React.Component {\n\n     constructor(props) {\n         super(props);\n         this.state = {\n             element: {\n             isColor: this.props.pfill,\n             isHighlighted: false\n             }\n         };\n     }\n\n    //methods\n    componentDidUpdate(prevProps, prevState) {\n \n        if(this.props.activecountrydata !== '') {\n         if (this.props.activecountrydata !== prevProps.activecountrydata) {\n             \n             let countryApiArray = this.props.activecountrydata.map(a => a.alpha2Code);\n           \n             if ((countryApiArray.indexOf(this.props.dataname) !== -1)) {\n                 this.setState({\n                     element: {\n                         isHighlighted: true,\n                         isColor: '#ffa500'\n                     }\n                   });\n             }\n         }\n} \n           \n        }\n    \n\n    \n    render() {\n\nreturn (\n\n    <PathView\n      stroke={this.props.stroke}\n      fill={this.state.element.isColor}\n      id={this.props.id}\n      d={this.props.d}\n      runner={this.props.runner ? this.props.runner : undefined}\n      activecountrydata={this.props.activecountrydata}\n    >\n     \n    \n      \n     </PathView>\n        );\n}\n}\n\nexport default PathContainer;\n","import React from 'react';\nimport PathContainer from './Path/PathContainer';\nconst svgData = require('./assets/world.min.json');\n\n// import SuperStructureView from './SuperStructureView';\n// import MapContainer from './Map/MapContainer';\n// import DataPanelContainer from './DataPanel/DataPanelContainer';\n\nclass SvgLoader extends React.Component {\n\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {};\n    // }\n\n    //methods\n\n\n    render() {\n       \n// I am in the process of trying \nreturn (\n    <svg\n      xmnlns={svgData.attributes.xmlns}\n      version={svgData.attributes.version}\n      id={this.props.id }\n      height={this.props.height ? this.props.height : ((svgData.attributes.height) ? svgData.attributes.height : undefined)}\n      width={this.props.width ? this.props.width : ((svgData.attributes.width) ? svgData.attributes.width : undefined)}\n      strokeLinejoin={this.props.StrokeLinejoin ? this.props.StrokeLinejoin : ((svgData.attributes['stroke-line-join']) ? svgData.attributes['stroke-line-join'] : undefined)}\n      stroke={this.props.stroke ? this.props.stroke : ((svgData.attributes.stroke) ? svgData.attributes.stroke : undefined)}\n      fill={this.props.fill ? this.props.fill : ((svgData.attributes.fill) ? svgData.attributes.fill : undefined)}\n      viewBox={this.props.viewBox ? this.props.viewBox : (svgData.attributes.viewBox ? svgData.attributes.viewBox : undefined)}\n    >\n      {/* filter */}\n    {svgData.children.map((p, i) => {\n        const countryCode = p.attributes['data-id'];\n        return (\n        <PathContainer\n        svgelementtype={p.name}\n        nodeType={p.type}\n        pfill={p.attributes.fill}\n        stroke={p.attributes.stroke ? p.atttributes.stroke : undefined}\n\tkey={i}\n\tid={p.attributes.id}\n        dataname={countryCode}\n        d={p.attributes.d}\n        runner={this.props.runner ? this.props.runner : undefined}\n        activecountrydata={this.props.activecountrydata}\n          \n          \n         \n        />\n        );\n    })}\n      \n            </svg>\n        );\n}\n}\n\nexport default SvgLoader;\n//apiCountryArray[countryName] !== -1\n//fill={(!apiCountryArray) ? '#ffa500' : (p.attributes.fill ? p.attributes.fill : undefined)}\n//p.attributes.fill ? p.attributes.fill : undefined\n//(apiCountryArray === undefined) ? p.attributes.fill : ((apiCountryArray[countryName] !== -1) ? '#ffa500' : (p.attributes.fill ? p.attributes.fill : undefined))\n\n\n","import React from 'react';\nimport SvgLoader from './SvgLoader';\n\n// import SuperStructureView from './SuperStructureView';\n// import MapContainer from './Map/MapContainer';\n// import DataPanelContainer from './DataPanel/DataPanelContainer';\n\nclass SvgContainer extends React.Component {\n\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {};\n    // }\n\n    //methods\n\n    render() {\n\nreturn (\n            <div>\n              \n              <SvgLoader\n                activecountrydata={this.props.activecountrydata}\n                viewBox={'0 0 2000 1001'}\n                height={500}\n                width={1000}\n              />\n            </div>\n        );\n}\n}\n\nexport default SvgContainer;\n","import React from 'react';\nimport SvgContainer from './SvgContainer/SvgContainer';\n\n// import SuperStructureView from './SuperStructureView';\n// import MapContainer from './Map/MapContainer';\n// import DataPanelContainer from './DataPanel/DataPanelContainer';\n\nclass MapView extends React.Component {\n\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {};\n    // }\n\n    //methods\n\n    render() {\n\nreturn (\n    // style={{ float: 'left'}}>\n    <div>\n              <SvgContainer activecountrydata={this.props.activecountrydata}/>\n            </div>\n        );\n}\n}\n\n    \n \nexport default MapView;\n","import React from 'react';\n\nimport MapView from './MapView';\n\nclass MapContainer extends React.Component {\n\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {};\n    // }\n\n    //methods\n\n    render() {\n\nreturn (\n            <div>\n              {/* <DataPanelContainer/> */}\n              <MapView activecountrydata={this.props.activecountrydata} />\n            </div>\n        );\n}\n}\n\n    \n \nexport default MapContainer;\n","import React from 'react';\nimport DataPanelContainer from './DataPanel/DataPanelContainer';\nimport MapContainer from './Map/MapContainer';\n\nclass SuperStructureView extends React.Component {\n\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {};\n    // }\n\n    //methods\n\n    render() {\n\nreturn (\n    <div style={{display: 'flex', flexDirection: 'row'}}>\n              <DataPanelContainer runner={this.props.runner}/>\n      <MapContainer activecountrydata={this.props.activecountrydata} />\n            </div>\n        );\n}\n}\n\n    \n \nexport default SuperStructureView;\n","import React from 'react';\n\n import SuperStructureView from './SuperStructureView';\n// import MapContainer from './Map/MapContainer';\n// import DataPanelContainer from './DataPanel/DataPanelContainer';\n\nclass SuperStructureContainer extends React.Component {\n\n     constructor(props) {\n         super(props);\n         this.state = {\n             apiData: ''\n         };\n     }\n\n    //methods\n    runner = (delivery) => {\n        this.setState({\n            apiData: delivery\n        });\n    }\n    \n    render() {\n\nreturn (\n            <div>\n              <SuperStructureView activecountrydata={this.state.apiData} runner={this.runner}/>\n            </div>\n        );\n}\n}\n\n    \n\n\n        \n\n\n\nexport default SuperStructureContainer;\n\n    \n    \n","import React, { Component } from 'react';\nimport './App.css';\nimport SuperStructureContainer from './Components/SuperStructure/SuperStructureContainer';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SuperStructureContainer/>\n          \n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}